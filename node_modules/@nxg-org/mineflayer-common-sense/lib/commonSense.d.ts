import type { Bot } from "mineflayer";
import { Vec3 } from "vec3";
import type { Block } from "prismarine-block";
import type { Item } from "prismarine-item";
declare type MlgItemInfo = {
    name: string;
    maxDistance?: number;
    disallowedDimensons?: string[];
    allowedBlocks?: string[];
};
export interface ICommonSenseOptions {
    autoRespond: boolean;
    useOffhand: boolean;
    reach: number;
    fireCheck: boolean;
    mlgCheck: boolean | {
        predictTicks: number;
        mountOnly?: boolean;
    };
    mlgItems: MlgItemInfo[];
    mlgVehicles: string[];
    mlgMountFirst: boolean;
    strictMlgNameMatch: boolean;
    strictMlgBlockMatch: boolean;
}
export declare const DefaultCommonSenseOptions: ICommonSenseOptions;
export declare class CommonSense {
    private bot;
    isFalling: boolean;
    isOnFire: boolean;
    requipLastItem: boolean;
    puttingOutFire: boolean;
    MLGing: boolean;
    options: ICommonSenseOptions;
    private blocksByName;
    private causesFire;
    constructor(bot: Bot, options?: Partial<ICommonSenseOptions>);
    setOptions(options: Partial<ICommonSenseOptions>): ICommonSenseOptions;
    isFallingCheckEasy: () => Promise<void>;
    private onMetadataFireCheck;
    private onStatusFireCheck;
    putOutFire(): Promise<boolean>;
    reachableFireCauserBlocks(maxDistance?: number): Vec3[];
    findLocalWater(nearbyBlockPos?: Vec3, maxDistance?: number): Block | null;
    private findMLGPlacementBlock;
    getMLGItem(orgHeight: number, landingBlock: Block): Item | null;
    private mountEntityFilter;
    entityMountMLG(override?: boolean): Promise<boolean>;
    private findMLGItemType;
    placementMLG(): Promise<boolean>;
    private pickUpWater;
    private naivePlaceAndCheck;
    private waitForBBCollision;
}
export {};
