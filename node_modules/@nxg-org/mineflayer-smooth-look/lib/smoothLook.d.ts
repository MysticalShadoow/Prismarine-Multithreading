import { Bot } from "mineflayer";
import { Vec3 } from "vec3";
type EasingFunction = (amount: number) => number;
export declare class SmoothLook {
    private bot;
    debug: boolean;
    readonly currentlyLooking: boolean;
    private _task;
    easing: EasingFunction;
    constructor(bot: Bot, debug?: boolean);
    setEasing(func: EasingFunction): void;
    /**
     * Wraps the euler so the walk from start to finish is clean,
     * no snapback when neg to pos values.
     */
    private _wrapRotationEuler;
    /**
     * Build custom Tween that interacts w/ the bot object
     * and cleans itself up once finishing.
     */
    private _buildTask;
    /**
     * Unused. Would clean up internal tasks.
     */
    private _cleanupTasks;
    /**
     * Used by force value. Cancel current task,
     * then start on current tween value to wanted destination.
     * This smoothly connects tweens (standard chaining is broken).
     */
    private _launchNextTaskFromCancel;
    /**
     * Used by non-force. Wait for current task to end,
     * then begin new task from current position.
     * This does not cancel the current task and overrides the initial custom task clear.
     */
    private eventuallyChain;
    look(yaw: number, pitch: number, duration?: number, force?: boolean): Promise<void>;
    lookTowards(dir: Vec3, duration?: number, force?: boolean): Promise<void>;
    lookAt(target: Vec3, duration?: number, force?: boolean): Promise<void>;
    private _debug;
}
export {};
