"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmoothLook = void 0;
var lookUtil_1 = require("./lookUtil");
var tween_js_1 = require("@tweenjs/tween.js");
var SmoothLook = /** @class */ (function () {
    function SmoothLook(bot, debug) {
        if (debug === void 0) { debug = false; }
        this.bot = bot;
        this.debug = debug;
        this.currentlyLooking = false;
        this.easing = tween_js_1.default.Easing.Elastic.Out;
        this._task = null;
    }
    SmoothLook.prototype.setEasing = function (func) {
        this.easing = func;
    };
    /**
     * Wraps the euler so the walk from start to finish is clean,
     * no snapback when neg to pos values.
     */
    SmoothLook.prototype._wrapRotationEuler = function (start, dest) {
        if (Math.abs(start.x - dest.x) > Math.PI)
            dest.x = dest.x + 2 * Math.sign(start.x - dest.x) * Math.PI;
        return dest;
    };
    /**
     * Build custom Tween that interacts w/ the bot object
     * and cleans itself up once finishing.
     */
    SmoothLook.prototype._buildTask = function (start, dest, duration) {
        var _this = this;
        return new tween_js_1.default.Tween(start)
            .to(dest, duration)
            .easing(this.easing)
            .onUpdate(function (current) {
            _this.bot.look(current.x, current.y, true);
        })
            .onComplete(function (current) {
            if (_this._task && _this._task._chainedTweens.length === 0) {
                _this._task = null;
            }
        });
    };
    /**
     * Unused. Would clean up internal tasks.
     */
    SmoothLook.prototype._cleanupTasks = function (chained) {
        if (chained === void 0) { chained = true; }
        if (this._task) {
            this._task.stop();
            if (chained)
                this._task.stopChainedTweens();
            this._task = null;
        }
    };
    /**
     * Used by force value. Cancel current task,
     * then start on current tween value to wanted destination.
     * This smoothly connects tweens (standard chaining is broken).
     */
    SmoothLook.prototype._launchNextTaskFromCancel = function (dest, duration) {
        var _this = this;
        if (this._task) {
            this._task
                .onStop(function (current) {
                _this._task = _this._buildTask(current, _this._wrapRotationEuler(current, dest), duration);
                _this._task.start();
            })
                .stop();
        }
    };
    /**
     * Used by non-force. Wait for current task to end,
     * then begin new task from current position.
     * This does not cancel the current task and overrides the initial custom task clear.
     */
    SmoothLook.prototype.eventuallyChain = function (dest, duration) {
        var _this = this;
        if (this._task) {
            this._task.onComplete(function (current) {
                _this._task = _this._buildTask(current, _this._wrapRotationEuler(current, dest), duration).start();
            });
        }
    };
    SmoothLook.prototype.look = function (yaw, pitch, duration, force) {
        if (duration === void 0) { duration = 1000; }
        if (force === void 0) { force = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.lookTowards((0, lookUtil_1.yawPitchToDir)(yaw, pitch), duration, force);
                return [2 /*return*/];
            });
        });
    };
    SmoothLook.prototype.lookTowards = function (dir, duration, force) {
        var _a, _b, _c;
        if (duration === void 0) { duration = 1000; }
        if (force === void 0) { force = true; }
        return __awaiter(this, void 0, void 0, function () {
            var startRotation, endRotation;
            return __generator(this, function (_d) {
                startRotation = (0, lookUtil_1.lookingAtEuler)(this.bot.entity.yaw, this.bot.entity.pitch);
                endRotation = (0, lookUtil_1.dirToEuler)(dir);
                this._wrapRotationEuler(startRotation, endRotation);
                if (((_a = this._task) === null || _a === void 0 ? void 0 : _a.isPlaying()) && !force) {
                    this._debug("task running + not forcing.", tween_js_1.default.getAll().length, "tasks.");
                    this.eventuallyChain(endRotation, duration);
                }
                else if (((_b = this._task) === null || _b === void 0 ? void 0 : _b.isPlaying()) && force) {
                    this._debug("task running + forcing.", tween_js_1.default.getAll().length, "tasks.");
                    this._launchNextTaskFromCancel(endRotation, duration);
                }
                else if (!((_c = this._task) === null || _c === void 0 ? void 0 : _c.isPlaying())) {
                    this._debug("task not running, making new.", tween_js_1.default.getAll().length, "tasks.");
                    this._task = this._buildTask(startRotation, endRotation, duration);
                    this._task.start();
                }
                return [2 /*return*/];
            });
        });
    };
    SmoothLook.prototype.lookAt = function (target, duration, force) {
        var _a, _b, _c;
        if (duration === void 0) { duration = 1000; }
        if (force === void 0) { force = true; }
        return __awaiter(this, void 0, void 0, function () {
            var startRotation, endRotation;
            return __generator(this, function (_d) {
                startRotation = (0, lookUtil_1.lookingAtEuler)(this.bot.entity.yaw, this.bot.entity.pitch);
                endRotation = (0, lookUtil_1.targetEuler)(this.bot.entity.position.offset(0, this.bot.entity.height, 0), target);
                this._wrapRotationEuler(startRotation, endRotation);
                if (((_a = this._task) === null || _a === void 0 ? void 0 : _a.isPlaying()) && !force) {
                    this._debug("task running + not forcing.", tween_js_1.default.getAll().length, "tasks.");
                    this.eventuallyChain(endRotation, duration);
                }
                else if (((_b = this._task) === null || _b === void 0 ? void 0 : _b.isPlaying()) && force) {
                    this._debug("task running + forcing.", tween_js_1.default.getAll().length, "tasks.");
                    this._launchNextTaskFromCancel(endRotation, duration);
                }
                else if (!((_c = this._task) === null || _c === void 0 ? void 0 : _c.isPlaying())) {
                    this._debug("task not running, making new.", tween_js_1.default.getAll().length, "tasks.");
                    this._task = this._buildTask(startRotation, endRotation, duration);
                    this._task.start();
                }
                return [2 /*return*/];
            });
        });
    };
    SmoothLook.prototype._debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (this.debug)
            console.log.apply(console, __spreadArray([message], optionalParams, false));
    };
    return SmoothLook;
}());
exports.SmoothLook = SmoothLook;
