"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalFactory = void 0;
const goals = __importStar(require("./goals"));
var GoalFactory;
(function (GoalFactory) {
    function followEntity(bot, target, wantedDistance = 1) {
        return new goals.EntityGoalDynamic(bot, target, wantedDistance);
    }
    GoalFactory.followEntity = followEntity;
    function predictEntity(bot, target, wantedDistance = 1, ticksToPredict = 1, predictiveFunction) {
        return new goals.EntityGoalPredictive(bot, target, wantedDistance, ticksToPredict, predictiveFunction);
    }
    GoalFactory.predictEntity = predictEntity;
    function gotoEntity(bot, target) {
        return new goals.StaticGoal(bot, target.position);
    }
    GoalFactory.gotoEntity = gotoEntity;
    function gotoPos(bot, target) {
        return new goals.StaticGoal(bot, target);
    }
    GoalFactory.gotoPos = gotoPos;
    function inverseGoal(goal) {
        return new goals.InverseGoal(goal);
    }
    GoalFactory.inverseGoal = inverseGoal;
})(GoalFactory = exports.GoalFactory || (exports.GoalFactory = {}));
/**
 * usage:
 *
 * const nonPredictive = GoalFactory.followEntity(bot, entity, false)
 *
 * const predictive = GoalFactory.followEntity(bot, entity, true)
 *
 * const staticEntity = GoalFactory.gotoEntity(bot, entity)
 *
 * const staticPos = GoalFactory.gotoPos(bot, target)
 *
 */
