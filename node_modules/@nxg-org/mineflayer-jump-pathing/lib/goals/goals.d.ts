/// <reference types="node" />
import EventEmitter from "events";
import { Bot } from "mineflayer";
import { Entity } from "prismarine-entity";
import { Vec3 } from "vec3";
import { PredictiveFunction } from "./goalTypes";
export interface BaseGoalOptions {
    dynamic: boolean;
    predictive: boolean;
}
export declare abstract class BaseGoal extends EventEmitter implements BaseGoalOptions {
    readonly bot: Bot;
    readonly target: Entity | Vec3;
    readonly dynamic: boolean;
    readonly predictive: boolean;
    constructor(bot: Bot, target: Entity | Vec3, dynamic: boolean, predictive: boolean);
    abstract get goalPos(): Vec3;
    abstract get goalPosRaw(): Vec3;
    abstract goalReached(): boolean;
    predictiveFunction?: PredictiveFunction;
}
export declare class StaticGoal extends BaseGoal {
    target: Vec3;
    constructor(bot: Bot, target: Vec3);
    get goalPos(): Vec3;
    get goalPosRaw(): Vec3;
    goalReached(): boolean;
}
export declare class EntityGoalDynamic extends BaseGoal {
    target: Entity;
    readonly wantedDistance: number;
    constructor(bot: Bot, target: Entity, wantedDistance?: number);
    get goalPos(): Vec3;
    get goalPosRaw(): Vec3;
    goalReached(): boolean;
}
export declare class EntityGoalPredictive extends BaseGoal {
    target: Entity;
    readonly wantedDistance: number;
    ticksToPredict: number;
    predictiveFunction: PredictiveFunction;
    constructor(bot: Bot, target: Entity, wantedDistance?: number, ticksToPredict?: number, predictiveFunction?: PredictiveFunction);
    get goalPos(): Vec3;
    get goalPosRaw(): Vec3;
    goalReached(): boolean;
}
export declare class InverseGoal extends BaseGoal {
    protected goal: BaseGoal;
    constructor(goal: BaseGoal);
    get goalPos(): Vec3;
    get goalPosRaw(): Vec3;
    goalReached(): boolean;
}
