"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShotFactory = void 0;
const vec3_1 = require("vec3");
const constants_1 = require("./calc/constants");
const mathUtilts_1 = require("./calc/mathUtilts");
const shot_1 = require("./shot");
const emptyVec = new vec3_1.Vec3(0, 0, 0);
class ShotFactory {
    static fromShootingPlayer({ position, yaw, pitch, velocity, heldItem, onGround }, interceptCalcs, weapon) {
        var _a, _b;
        const info = constants_1.trajectoryInfo[(_a = weapon) !== null && _a !== void 0 ? _a : heldItem === null || heldItem === void 0 ? void 0 : heldItem.name];
        if (!!info) {
            onGround !== null && onGround !== void 0 ? onGround : (onGround = true);
            const projVel = (0, mathUtilts_1.yawPitchAndSpeedToDir)(yaw, pitch, info.v0);
            const newOrgVel = velocity.clone().translate(0, onGround ? -velocity.y : 0, 0);
            return new shot_1.Shot(newOrgVel, { position: position.offset(0, info.ph, 0), velocity: projVel, gravity: info.g }, interceptCalcs);
        }
        else {
            throw (_b = "Invalid weapon: " + weapon) !== null && _b !== void 0 ? _b : heldItem === null || heldItem === void 0 ? void 0 : heldItem.name;
        }
    }
    //TODO: Support tridents. Lazy rn.
    static fromMob({ position, velocity, yaw, pitch, onGround }, interceptCalcs) {
        onGround !== null && onGround !== void 0 ? onGround : (onGround = true);
        const projVel = (0, mathUtilts_1.yawPitchAndSpeedToDir)(yaw, pitch, 1.6);
        const newOrgVel = velocity.clone().translate(0, onGround ? -velocity.y : 0, 0);
        return new shot_1.Shot(newOrgVel, { position: position.offset(0, 1.64, 0), velocity: projVel, gravity: 0.05 }, interceptCalcs);
    }
    static fromEntity({ position, velocity, name }, interceptCalcs) {
        const gravity = constants_1.projectileGravity[name];
        if (!!gravity)
            return new shot_1.Shot(emptyVec, { position, velocity, gravity }, interceptCalcs);
        else
            throw `Invalid projectile type: ${name}`;
    }
}
exports.ShotFactory = ShotFactory;
ShotFactory.fromPlayer = ShotFactory.fromShootingPlayer;
