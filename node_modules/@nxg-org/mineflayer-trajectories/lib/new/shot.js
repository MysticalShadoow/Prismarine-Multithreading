"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewShot = void 0;
const mineflayer_physics_util_1 = require("@nxg-org/mineflayer-physics-util");
const vec3_1 = require("vec3");
class NewShot {
    constructor(entityType, options = {}) {
        this.sim = new mineflayer_physics_util_1.EntityPhysics(NewShot.data);
        this.simCtx = mineflayer_physics_util_1.EPhysicsCtx.FROM_ENTITY_TYPE(this.sim, entityType, options);
    }
    calcToIntercept(bot) {
        console.log(this.simCtx);
        let currentPosition = new vec3_1.Vec3(0, 0, 0);
        let nextPosition = new vec3_1.Vec3(0, 0, 0);
        let positions = [];
        do {
            currentPosition.update(this.simCtx.position);
            this.sim.simulate(this.simCtx, bot.world);
            nextPosition.update(this.simCtx.position);
            positions.push(currentPosition.clone());
        } while (this.sim.shouldMoveEntity(this.simCtx));
        console.log(this.simCtx.state.position, positions.length);
        (() => __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < 3; i++) {
                for (const pos of positions) {
                    const { x, y, z } = pos;
                    bot.chat(`/particle flame ${x} ${y} ${z} 0 0 0 0 1 force`);
                }
                yield bot.waitForTicks(20);
            }
        }))();
    }
}
exports.NewShot = NewShot;
