"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const mineflayer_physics_util_1 = __importDefault(require("@nxg-org/mineflayer-physics-util"));
const mineflayer_1 = require("mineflayer");
const vec3_1 = require("vec3");
const minecraft_data_1 = __importDefault(require("minecraft-data"));
const shot_1 = require("./shot");
const bot = (0, mineflayer_1.createBot)({
    username: "shot-testing",
    host: "localhost",
    port: (_a = Number(process.argv[3])) !== null && _a !== void 0 ? _a : 25565,
    version: "1.17.1",
});
bot.loadPlugin(mineflayer_physics_util_1.default);
let checkedEntities = {};
const data = (0, minecraft_data_1.default)(bot.version);
const emptyVec = new vec3_1.Vec3(0, 0, 0);
shot_1.NewShot.data = data;
bot.on("entityMoved", (ent) => __awaiter(void 0, void 0, void 0, function* () {
    if (checkedEntities[ent.id])
        return;
    checkedEntities[ent.id] = ent;
    // if (data.entitiesByName[ent.name!]) {
    //     console.log("test")
    //     ent.onGround = false
    //     const shot = new NewShot(data.entitiesByName[ent.name!], ent)
    //     shot.calcToIntercept(bot);
    // }
    console.log(ent.name);
    if (ent.name && ["arrow", "firework_rocket", "ender_pearl", "trident", "egg", "experience_bottle"].includes(ent.name)) {
        ent.onGround = false;
        const shot = new shot_1.NewShot(data.entitiesByName[ent.name], ent);
        shot.calcToIntercept(bot);
    }
    // // console.log(vectorMagnitude(orgEntityData.velocity));
    // if (["arrow", "firework_rocket", "ender_pearl"].includes(ent.name!)) {
    //     for (const entity of Object.values(bot.entities).filter(e => e !== ent && (e.type === "mob" || e.type === "player"))) {
    //         const hit = ShotFactory.fromEntity(ent, intercepter).hitsEntityWithPrediction({position: entity.position, height: entity.height + 0.18, width: entity.width}, emptyVec);
    //         if (!hit) continue;
    //         if (hit.intersectPos) {
    //             bot.chat(`/particle note ${ent.position.x} ${ent.position.y} ${ent.position.z} 0 0 0 0 1 force`);
    //             console.log(ent.name, "is going to hit entity", entity.username ?? entity.name, "at position:", hit.intersectPos);
    //             bot.chat(`/particle flame ${hit.closestPoint!.x} ${hit.closestPoint!.y + 2} ${hit.closestPoint!.z} 0 0 0 0 1 force`);
    //         }
    //     }
    // }
}));
